; Этот файл потом мы кидаем в контейнер
; Включение OPCache
zend_extension=opcache

; Основные параметры
opcache.enable=1                  ; Включить OPCache
opcache.enable_cli=1              ; Включить OPCache для CLI (тоже надо, т.к. мы юзаем CLI)
opcache.memory_consumption=128    ; Размер памяти для хранения кэша (увеличьте, если много скриптов)
opcache.interned_strings_buffer=16 ; Память для строковых литералов
opcache.max_accelerated_files=10000 ; Количество файлов для кэширования (подходит для крупных проектов)
opcache.validate_timestamps=1     ; Проверять изменения файлов (1 для разработки, 0 для продакшена)
opcache.revalidate_freq=2         ; Проверка изменений каждые 2 секунды (уменьшите для частых изменений)

; JIT-компиляция
opcache.jit_buffer_size=128M      ; Память для JIT-компилятора
opcache.jit=1255                  ; Режим JIT "hot loops" (самый агрессивный, подходит для вычислений)

; Оптимизация работы кэша
opcache.fast_shutdown=1           ; Быстрая очистка при завершении работы
opcache.enable_file_override=1    ; Кэширование даже при блокировках файлов
opcache.save_comments=1           ; Сохранять комментарии (нужно для некоторых фреймворков, например, Doctrine)
opcache.file_cache=/tmp/opcache   ; Опционально: путь для fallback-кэша на диск
opcache.file_cache_only=0         ; Использовать fallback-кэш только при нехватке памяти

; Диагностика и отладка
opcache.log_verbosity_level=1     ; Минимальный уровень логирования (0 - отключить, 1 - минимальное логирование)
opcache.error_log=/var/log/php_opcache.log ; Путь к логу ошибок OPCache (опционально)

; Параметры для продакшена
;opcache.preload=/path/to/preload.php ; Опционально: путь к скрипту для предзагрузки файлов
opcache.huge_code_pages=1         ; Включение huge pages (требует настройки ОС, ускоряет кэш)
